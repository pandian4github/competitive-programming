#include<stdlib.h>
#include<stdio.h>
struct BTree
 {
   long long int data;
   struct BTree *left;
   struct BTree *right;
 };
typedef struct BTree* Tree;
Tree Findmin(Tree t)
 {
   if(t->left==NULL)
    return t;
   else
    return Findmin(t->left); 
    
 }  
void Delete(int n,Tree t)
 {
   Tree t1;
   if(n<t->data)
    Delete(n,t->left);
   else
    if(n>t->data)
     Delete(n,t->right);
    else
     if(t->left&&t->right)
      {
        t1=Findmin(t->right);
        t->data=t1->data;
        Delete(t->data,t->right);
      }
     else
      {
        if(t->left==NULL)
         t=t->right;
        else
         t=t->left;
      }
   }          
Tree Insert(long long int n,Tree t)
 {
   if(t==NULL)
    {
      t=(Tree)malloc(sizeof(struct BTree));
      t->data=n;
      t->left=t->right=NULL;
    }
  else
   if(n<t->data)
    t->left=Insert(n,t->left);
  else
    if(n>t->data)
      t->right=Insert(n,t->right);    
    else
      Delete(n,t);
   return t;
 }       
         
int main()
 {
   long long int n;
   long int i,r;
   Tree t=NULL;
   scanf("%ld",&r);
   for(i=0;i<r;i++)
    {
      scanf("%lld",&n);
      t=Insert(n,t);
    }
    printf("%lld\n",t->data);    
   return 0;
 }  
 
